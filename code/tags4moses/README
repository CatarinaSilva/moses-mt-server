Pipeline

### Raw Input ###

$ cat example

Also <b id="4">nested<i> tags</i> </b>work <dot>.</dot>
Line with no tag .
Keep escaped markup <b>&lt;</b>
<img alt='a beautiful image'/>
<BIG><BIG>double cased markup</BIG></BIG>
this is the hmtl symbol for "higher than": &gt;
this is the character for "higher than": >
Quotes<tag id='double"quote"' id2="single'quote">work.</tag>
<!-- Comment-->
Each<tag/>is<treated/>as<a/>space<by/>the<tokenizer/>
<a help="empty element"/>3>2 & 4>3.

### Tokenized ###

$ cat example | /path/to/tokenizer.perl -X -l en

Also <b id="4"> nested <i> tags </i> </b> work <dot> . </dot>
Line with no tag .
Keep escaped markup <b> &amp; lt ; </b>
<img alt='a beautiful image'/>
<BIG> <BIG> double cased markup </BIG> </BIG>
this is the hmtl symbol for &quot; higher than &quot; : &amp; gt ;
this is the character for &quot; higher than &quot; : &gt;
Quotes <tag id='double"quote"' id2="single'quote"> work . </tag>
<!-- Comment-->
Each <tag/> is <treated/> as <a/> space <by/> the <tokenizer/> .
<a help="empty element"/> 3 &gt; 2 &amp; 4 &gt; 3 .

### Annotate words with tags ###

$ cat example | /path/to/tokenizer.perl  -X -l en | ./annotate_words.py

<passthrough tag="1#&lt;b_1 id=&quot;4&quot;&gt;#0||2#&lt;b_1 id=&quot;4&quot;&gt;#0||2#&lt;i_2&gt;#0||4#&lt;dot_3&gt;#0" src="Also nested tags work ."/>Also nested tags work .
<passthrough tag="" src="Line with no tag ."/>Line with no tag .
<passthrough tag="3#&lt;b_1&gt;#0||4#&lt;b_1&gt;#0||5#&lt;b_1&gt;#0" src="Keep escaped markup &amp; lt ;"/>Keep escaped markup &amp; lt ;
<passthrough tag="0#&lt;img_1 alt=&quot;a beautiful image&quot;&gt;#1" src=""/>
<passthrough tag="0#&lt;BIG_1&gt;#1||0#&lt;BIG_1&gt;#0||0#&lt;BIG_2&gt;#0||1#&lt;BIG_1&gt;#0||1#&lt;BIG_2&gt;#0||2#&lt;BIG_1&gt;#0||2#&lt;BIG_2&gt;#0" src="double cased markup"/>double cased markup
<passthrough tag="" src="this is the hmtl symbol for &quot; higher than &quot; : &amp; gt ;"/>this is the hmtl symbol for &quot; higher than &quot; : &amp; gt ;
<passthrough tag="" src="this is the character for &quot; higher than &quot; : &gt;"/>this is the character for &quot; higher than &quot; : &gt;
<passthrough tag="1#&lt;tag_1 id=&apos;double&quot;quote&quot;&apos; id2=&quot;single&apos;quote&quot;&gt;#0||2#&lt;tag_1 id=&apos;double&quot;quote&quot;&apos; id2=&quot;single&apos;quote&quot;&gt;#0" src="Quotes work ."/>Quotes work .
<passthrough tag="0#&lt;&lt;built-in function Comment&gt;_1&gt;#0" src="Comment"/>Comment
<passthrough tag="1#&lt;tag_1&gt;#1||2#&lt;treated_2&gt;#1||3#&lt;a_3&gt;#1||4#&lt;by_4&gt;#1||5#&lt;tokenizer_5&gt;#1" src="Each is as space the ."/>Each is as space the .
<passthrough tag="0#&lt;a_1 help=&quot;empty element&quot;&gt;#1" src="3 &gt; 2 &amp; 4 &gt; 3 ."/>3 &gt; 2 &amp; 4 &gt; 3 .

Or in the more human readable but unparseable version:

$ cat example | /path/to/tokenizer.perl  -x | ./annotate_words.py -noescape

<passthrough tag="1#<b_1 id="4">#0||2#<b_1 id="4">#0||2#<i_2>#0||4#<dot_3>#0" src="Also nested tags work ."/>Also nested tags work .
<passthrough tag="" src="Line with no tag ."/>Line with no tag .
<passthrough tag="3#<b_1>#0||4#<b_1>#0||5#<b_1>#0" src="Keep escaped markup &amp; lt ;"/>Keep escaped markup &amp; lt ;
<passthrough tag="0#<img_1 alt="a beautiful image">#1" src=""/>
<passthrough tag="0#<BIG_1>#1||0#<BIG_1>#0||0#<BIG_2>#0||1#<BIG_1>#0||1#<BIG_2>#0||2#<BIG_1>#0||2#<BIG_2>#0" src="double cased markup"/>double cased markup
<passthrough tag="" src="this is the hmtl symbol for &quot; higher than &quot; : &amp; gt ;"/>this is the hmtl symbol for &quot; higher than &quot; : &amp; gt ;
<passthrough tag="" src="this is the character for &quot; higher than &quot; : &gt;"/>this is the character for &quot; higher than &quot; : &gt;
<passthrough tag="1#<tag_1 id='double"quote"' id2="single'quote">#0||2#<tag_1 id='double"quote"' id2="single'quote">#0" src="Quotes work ."/>Quotes work .
<passthrough tag="0#<<built-in function Comment>_1>#0" src="Comment"/>Comment
<passthrough tag="1#<tag_1>#1||2#<treated_2>#1||3#<a_3>#1||4#<by_4>#1||5#<tokenizer_5>#1" src="Each is as space the ."/>Each is as space the .
<passthrough tag="0#<a_1 help="empty element">#1" src="3 &gt; 2 &amp; 4 &gt; 3 ."/>3 &gt; 2 &amp; 4 &gt; 3 .

Then moses which will give us something like this:
<passthrough tag="1#&lt;b_1 id=&quot;4&quot;&gt;#0||2#&lt;b_1 id=&quot;4&quot;&gt;#0||2#&lt;i_2&gt;#0||4#&lt;dot_3&gt;#0" src="Also nested tags work ."/>Geschachtelte Tags |1-2| gehen |3-3| auch |0-0| prima |-1| . |4-4|

Then word alignment which will convert this to:
<passthrough tag="1#<b_1 id="4">||2#<b_1 id="4"><i_2>||4#<dot_3>" src="Also nested tags work ."/>Geschachtelte |1| Tags |2| gehen |3| auch |0| prima |-1| . |4|

Restoration of the tags on a word-level:
<b_1 id="4">Geschachtelte</b_1> <b_1 id="4"><i_2>Tags</i_2></b_1>gehen auch <dot_3>.</dot_3>

Collapsing adjaecent tags of same type:
<b_1 id="4">Geschachtelte<i_2>Tags</i_2></b_1>gehen auch <dot_3>.</dot_3>

Finally: Removal of tag-identifiers:
<b id="4">Geschachtelte<i>Tags</i></b>gehen auch <dot>.</dot>

Todo:

Gracefully fail if markup is not parseable
Deal with HTML markup
Try to translate attribute values?
Deal with comments
